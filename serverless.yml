service: dynamodb-lambda

frameworkVersion: '2'

custom:
  userTableName: 'users-table-${self:provider.stage}'
  uniqueTableName: 'uniques-table-${self:provider.stage}'
  KMSKeyId: ${ssm:/dynamodb-lambda/dev/kmskey}

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: ap-southeast-2
  environment:
    USERS_TABLE: ${self:custom.userTableName}
    UNIQUES_TABLE: ${self:custom.uniqueTableName}
    KMS_KEY_ID: ${self:custom.KMSKeyId}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:PutItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
        - Effect: Allow
          Action:
            - kms:Encrypt
          Resource: ${self:custom.KMSKeyId}

functions:
  create:
    handler: functions/users-create.handler
    events:
      - http:
          path: users
          method: post
          cors: true

  list:
    handler: functions/users-list.handler
    events:
      - http:
          path: users
          method: get
          cors: true

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.userTableName}
    UniquesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: value
            AttributeType: S
        KeySchema:
          - AttributeName: value
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.uniqueTableName}
